<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	
	<!-- Enables the Spring MVC @Controller programming model 아래 AnnotationMethodHandlerAdapter 동시 사용불가.
	 <annotation-driven/> 
	 -->

	<beans:bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <beans:property name="webBindingInitializer">
            <beans:bean class="egovframework.com.cmm.web.EgovBindingInitializer"/>
        </beans:property>
    
        <beans:property name="customArgumentResolvers">
            <beans:list>
                <beans:bean class="egovframework.rte.ptl.mvc.bind.CommandMapArgumentResolver"/>
            </beans:list>
        </beans:property>
		<beans:property name = "messageConverters">
			<beans:list>
				<beans:bean class = "org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
				</beans:bean>
			</beans:list>
		</beans:property>        
    </beans:bean>
    
    <beans:bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"/>
	


	


	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
<!-- 	<resources mapping="/img/**" location="/resources/" /> -->
	<!-- 이 위에 처럼 하지 말것. 헷갈려~~  -->
	<resources mapping="/css/**" location="/css/" />
	<resources mapping="/images/**" location="/images/" />
	<resources mapping="/js/**" location="/js/" />
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/shared/**" location="/shared/" />
	<!-- 
	
	http://gujjy.wordpress.com/2011/06/20/spring-mvc-exception-handler-%EC%99%80-viewresolver-%EA%B6%81%ED%95%A9/ 
	비교적 공통적인 예외처리는 SimpleMappingExceptionResolver 에서 처리하고
	공통적이지 않은 예외처리는 @ExceptionHandler 를 이용해 해당 클래스에서 처리하도록 설정하려 합니다.
	순서는 AnnotationMethodHandlerExceptionResolver에게 우선권을 줍니다. controller 클래스에서 직접 정의한 ExceptionHandler를 우선시하기 위함입니다.

	기존에 UrlBasedViewResolver만 등록되어 있어서 SimpleMappingExceptionResolver에서 Exception 에 맵핑한 View를 못찾습니다.
	그래서 BeanNameViewResolver를 등록합니다. 그래서 viewResolver가 두개가 됩니다.
	그런데 여기서 두 viewResolever의 우선권을 정하지 않으면 BeanNameViewResolver로 view 요청이 들어오질 않습니다. 
	특히 InternalResourceViewResolver 가 우선권을 가지면 다른 viewResolver는 기회조차 가지지 못한답니다.
	그래서 아래처럼 order를 정합니다.
	
	 -->
	 
	 
	<beans:bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver" >
		<beans:property name="order" value="1" />
	</beans:bean>
<!-- 	
	<beans:bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<beans:property name="defaultErrorView" value="commonExceptionView"/>
		<beans:property name="exceptionMappings">
			<beans:map>
				<beans:entry key="TypeMismatchException" value="commonExceptionView"/>
				<beans:entry key="org.springframework.beans.TypeMismatchException" value="commonExceptionView"/>
				<beans:entry key="NumberFormatException" value="commonExceptionView"/>
			</beans:map>
		</beans:property>
		<beans:property name="order" value="2"/>
	</beans:bean> 
-->

    <!-- 서블릿컨네이너상의 exception에 대한 오류 페이지를 연결하는 mvc 설정   egov에서 가져옴 -->
    <beans:bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <beans:property name="defaultErrorView" value="cmm/error/egovError"/>
        <beans:property name="exceptionMappings">
            <beans:props>
                <beans:prop key="org.springframework.dao.DataAccessException">cmm/error/dataAccessFailure</beans:prop>
                <beans:prop key="org.springframework.transaction.TransactionException">cmm/error/transactionFailure</beans:prop>
                <beans:prop key="egovframework.rte.fdl.cmmn.exception.EgovBizException">cmm/error/egovError</beans:prop>
                <beans:prop key="org.springframework.security.AccessDeniedException">cmm/error/accessDenied</beans:prop>
            </beans:props>
        </beans:property>
        <beans:property name="order" value="2"/>
    </beans:bean>



	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory 
	타일을 쓰려면 UrlBasedViewResolver를 사용함. InternalResourceView 는 viewClass로 JstlVew 를 사용하면 되고 단 prefix와 suffix를 
	지정해야 함. UrlBasedViewResolver를 사용할 경우는 타일에서 prefix나 suffix에 해당하는 것을 tiles.xml에 지정해야 함. 즉 타일을 쓸 경우는 모든 페이지에 대해
	xml 파일 등록을 해야 한다. tiles2/TilesView는 jstl을 내장함.  둘을 동시에 쓰는 방식도있지만
	더 복잡하다. 
	
	<beans:bean id="beanNameviewResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver" >
		<beans:property name="order" value="1" />
	</beans:bean>
	-->
	
	<beans:bean class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
		<beans:property name="order" value="2" />
	</beans:bean>
	
<!-- 
<beans:bean id="viewResolver"
    class="org.springframework.web.servlet.view.UrlBasedViewResolver">
    <beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles2.TilesView">

    </beans:property>
</beans:bean>
<beans:bean id="tilesConfigurer"
    class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
    <beans:property name="definitions" value="/WEB-INF/spring/tiles.xml">

    </beans:property>
</beans:bean>
 -->







	
	
	    <!-- 패키지 내 Controller, Service, Repository 클래스의 auto detect를 위한 mvc 설정 -->
	    
	<context:component-scan base-package="com.uro" />    
	    
    <context:component-scan base-package="egovframework" />

<!--     
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
    </context:component-scan>
 -->	
	
</beans:beans>
